1. what is "NPM" ?
 NPM doesn't mean node package manager but everything else (No problem man)
 npm init creates "package.json" file
 It is a package manager for Node.js that allows developers to easily install, manage, and share JavaScript code packages.
 we need npm because we need a lot of packages in our project / react app

2. what is "Parcel/Webpack"? why do we need it ?
 Parcel and webpack both are web application bundlers. Parcel requires minimal configuration and offers simplicity, automatically handling asset bundling and optimizations.
 webpack is highly configurable, providing greater flexibility with extensive options for handling complex dependency graphs and customizing the build process. 
 we need bundlers to power our app and make it production ready 

3. what is "parcel-cache" ?
 This cache allows Parcel to skip processing unchanged files during subsequent builds, making the build process faster

4. what is "NPX" ?
 it executes the packages without installing them globally. it is a package runner

5. what is the difference between "dependencies" and "devDependencies" ?
"Dependencies" are packages required for the application to run in production, while "devDependencies" are only needed during development for tools, testing, etc. Production uses "dependencies," and "devDependencies" are for development only.

6. what is Tree Shaking ?
 removing unwanted or unused code

7. what is Hot Module Replacement ?
 Hot Module Replacement (HMR) is a feature in web development tools that allows real-time code updates without page reloads, speeding up development and preserving application state.

8. List down your favourite 5 superPowers of Parcel and describe any 3 of them in your own words.

 1.Image optimizations
   Image optimization in Parcel refers to the automatic process of reducing image file sizes without compromising quality during the build, resulting in faster loading times and improved web performance.

 2.Bundling
 3.File watcher algorithm
    As you make changes to your code, Parcel automatically rebuilds the changed files and updates your app in the browser. By default, Parcel fully reloads the page, but in some cases it may perform Hot Module Replacement (HMR). HMR improves the development experience by updating modules in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things in your code.

 4.Caching while development
    Parcel uses caching to store the build results (minified and optimized versions )on disk. It tracks files, configurations, plugins, and dependencies involved in the build. When you make changes, it only rebuilds the updated or changed parts.

 5.HMR - Hot module replacement
 6.Minification 
 7.Compress
 8.Tree Shaking 
 9.Consistent Hashing 
 10.Error Handling
 11.Different build for dev and prod bundles
 
9. what is .gitignore ? what should we add and not add into it ?
   .gitignore is a configuration file in Git that specifies which files and directories should be ignored and not tracked by version control when using Git. It allows developers to exclude unnecessary files from being committed to the repository.
   Anything which can be autogenerated or generate on server should be put in .gitignore

10. what is the difference between "package.json" and "package-lock.json" ?
    "package.json" is a manual configuration file that lists project details and dependencies, while "package-lock.json" is an automatically generated file by npm to lock down exact dependency versions for consistency in different installations.

11. why should i not modify "package-lock.json" ?
    Modifying "package-lock.json" manually can cause inconsistency, version control conflicts, security risks, and overwrite changes on updates. It's best to avoid manual modifications and let npm manage it automatically.

12. what is "node_modules" ? is it a good idea to push that on git ?
  "node_modules" is a directory containing project dependencies installed by npm. It's generally not a good idea to push it to Git due to its large size, duplication, and version control bloat. Instead, include "package.json" and let others install dependencies locally with npm install

13. what is the "dist" folder ?
  the "dist" folder holds the production-ready, optimized version of a web application after the build process, making it easier to deploy and ensuring the best performance for end-users.

14. what is "browsersList" ?
  "Browserslist" is a way to tell web development tools which web browsers you want your project to work in. It helps these tools automatically adjust your code to support those browsers, making your website or app work well for all users.